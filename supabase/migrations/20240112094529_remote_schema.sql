create type "public"."service_status" as enum ('DRAFT', 'ACTIVE', 'ARCHIVED');

drop policy "allow user to read their own profile" on "public"."user_profile";

create table "public"."appointment_has_services" (
    "appointment_id" bigint not null,
    "service_id" bigint not null
);


alter table "public"."appointment_has_services" enable row level security;

create table "public"."services" (
    "created_at" timestamp with time zone not null default now(),
    "price" numeric,
    "duration" numeric,
    "status" service_status not null default 'DRAFT'::service_status,
    "description" text,
    "title" text default 'untitled'::text,
    "id" bigint generated by default as identity not null
);


alter table "public"."services" enable row level security;

CREATE UNIQUE INDEX appointment_has_services_appointment_id_key ON public.appointment_has_services USING btree (appointment_id);

CREATE UNIQUE INDEX appointment_has_services_pkey ON public.appointment_has_services USING btree (appointment_id);

CREATE UNIQUE INDEX services_id_key ON public.services USING btree (id);

CREATE UNIQUE INDEX services_pkey ON public.services USING btree (id);

alter table "public"."appointment_has_services" add constraint "appointment_has_services_pkey" PRIMARY KEY using index "appointment_has_services_pkey";

alter table "public"."services" add constraint "services_pkey" PRIMARY KEY using index "services_pkey";

alter table "public"."appointment_has_services" add constraint "appointment_has_services_appointment_id_fkey" FOREIGN KEY (appointment_id) REFERENCES appointments(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."appointment_has_services" validate constraint "appointment_has_services_appointment_id_fkey";

alter table "public"."appointment_has_services" add constraint "appointment_has_services_appointment_id_key" UNIQUE using index "appointment_has_services_appointment_id_key";

alter table "public"."appointment_has_services" add constraint "appointment_has_services_service_id_fkey" FOREIGN KEY (service_id) REFERENCES services(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."appointment_has_services" validate constraint "appointment_has_services_service_id_fkey";

alter table "public"."services" add constraint "services_id_key" UNIQUE using index "services_id_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.get_all_clients(auth_id uuid)
 RETURNS SETOF jsonb
 LANGUAGE plpgsql
AS $function$
BEGIN
  RETURN QUERY
  SELECT JSONB_BUILD_OBJECT(
    'id', client_profile.user_id,
    'email', get_user_email(client_profile.user_id::text),
    'name', client_profile.name
  )
  FROM user_has_role
  JOIN public.user_profile client_profile ON
  user_has_role.user_id::text = client_profile.user_id
  WHERE
    roles @> '["client"]' AND
    (check_are_users_connected(auth_id::text, client_profile.user_id::text) OR check_user_has_permission(auth_id, '["organization:read", "organization:admin"]'));
END;
$function$
;

grant delete on table "public"."appointment_has_services" to "anon";

grant insert on table "public"."appointment_has_services" to "anon";

grant references on table "public"."appointment_has_services" to "anon";

grant select on table "public"."appointment_has_services" to "anon";

grant trigger on table "public"."appointment_has_services" to "anon";

grant truncate on table "public"."appointment_has_services" to "anon";

grant update on table "public"."appointment_has_services" to "anon";

grant delete on table "public"."appointment_has_services" to "authenticated";

grant insert on table "public"."appointment_has_services" to "authenticated";

grant references on table "public"."appointment_has_services" to "authenticated";

grant select on table "public"."appointment_has_services" to "authenticated";

grant trigger on table "public"."appointment_has_services" to "authenticated";

grant truncate on table "public"."appointment_has_services" to "authenticated";

grant update on table "public"."appointment_has_services" to "authenticated";

grant delete on table "public"."appointment_has_services" to "service_role";

grant insert on table "public"."appointment_has_services" to "service_role";

grant references on table "public"."appointment_has_services" to "service_role";

grant select on table "public"."appointment_has_services" to "service_role";

grant trigger on table "public"."appointment_has_services" to "service_role";

grant truncate on table "public"."appointment_has_services" to "service_role";

grant update on table "public"."appointment_has_services" to "service_role";

grant delete on table "public"."services" to "anon";

grant insert on table "public"."services" to "anon";

grant references on table "public"."services" to "anon";

grant select on table "public"."services" to "anon";

grant trigger on table "public"."services" to "anon";

grant truncate on table "public"."services" to "anon";

grant update on table "public"."services" to "anon";

grant delete on table "public"."services" to "authenticated";

grant insert on table "public"."services" to "authenticated";

grant references on table "public"."services" to "authenticated";

grant select on table "public"."services" to "authenticated";

grant trigger on table "public"."services" to "authenticated";

grant truncate on table "public"."services" to "authenticated";

grant update on table "public"."services" to "authenticated";

grant delete on table "public"."services" to "service_role";

grant insert on table "public"."services" to "service_role";

grant references on table "public"."services" to "service_role";

grant select on table "public"."services" to "service_role";

grant trigger on table "public"."services" to "service_role";

grant truncate on table "public"."services" to "service_role";

grant update on table "public"."services" to "service_role";

create policy "Enable select access to authenticated users (temporary)"
on "public"."appointment_has_services"
as permissive
for select
to authenticated
using (true);


create policy "Enable select for authenticated users only (temporary)"
on "public"."services"
as permissive
for select
to authenticated
using (true);


create policy "Enable read access if client/employee are connected"
on "public"."user_has_role"
as permissive
for select
to public
using ((check_are_users_connected((auth.uid())::text, (user_id)::text) AND check_user_has_permission(auth.uid(), '["organization:read"]'::jsonb)));


create policy "allow user to read their own profile"
on "public"."user_profile"
as permissive
for select
to public
using ((((auth.uid())::text = user_id) AND check_user_has_permission(auth.uid(), '["organization:read"]'::jsonb)));



