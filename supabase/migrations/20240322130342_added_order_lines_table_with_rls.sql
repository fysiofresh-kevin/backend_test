CREATE TABLE IF NOT EXISTS "public"."order_lines" (
    "id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    "appointment_id" BIGINT NOT NULL,
    "invoice_id" BIGINT NOT NULL,
    "service" TEXT NOT NULL,
    "price" NUMERIC NOT NULL,
    "discount" NUMERIC DEFAULT 0
);

CREATE UNIQUE INDEX order_lines_pkey ON public.order_lines USING btree (id);

ALTER TABLE "public"."order_lines"
ADD CONSTRAINT "order_lines_pkey" PRIMARY KEY USING INDEX "order_lines_pkey";

ALTER TABLE "public"."order_lines"
ADD CONSTRAINT order_lines_appointment_id_fkey
FOREIGN KEY (appointment_id)
REFERENCES "public"."appointments" (id);

ALTER TABLE "public"."order_lines"
ADD CONSTRAINT order_lines_invoice_id_fkey
FOREIGN KEY (invoice_id)
REFERENCES "public"."invoices" (id);

ALTER TABLE "public"."order_lines" OWNER TO "postgres";

CREATE POLICY "Enable admin to read all order lines"
    ON "public"."order_lines"
    AS PERMISSIVE
    FOR SELECT
    TO AUTHENTICATED
    USING (
        ((check_user_has_permission(auth.uid(), ARRAY['organization:admin'])))
    );

CREATE POLICY "Enable admin to create order lines"
    ON "public"."order_lines"
    AS PERMISSIVE
    FOR INSERT
    TO AUTHENTICATED
    WITH CHECK (
        ((check_user_has_permission(auth.uid(), ARRAY['organization:admin', 'invoices:write'])))
    );

CREATE POLICY "Enable admin to delete order lines"
    ON "public"."order_lines"
    AS PERMISSIVE
    FOR DELETE
    TO AUTHENTICATED
    USING (
        ((check_user_has_permission(auth.uid(), ARRAY['organization:admin', 'invoices:admin'])))
    );


ALTER TABLE public.order_lines
    ENABLE ROW LEVEL SECURITY;


CREATE POLICY "Enable admins to create subscriptions"
    ON "public"."subscriptions"
    AS PERMISSIVE
    FOR INSERT
    TO AUTHENTICATED
    WITH CHECK (
        ((check_user_has_permission(auth.uid(), ARRAY['organization:admin', 'invoices:write'])))
    );